{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\ncontroller_1 = Controller(PRIMARY)\narm = Motor(Ports.PORT8, GearSetting.RATIO_18_1, False)\nclaw = Motor(Ports.PORT3, GearSetting.RATIO_18_1, False)\nleft_motor_a = Motor(Ports.PORT1, GearSetting.RATIO_18_1, False)\nleft_motor_b = Motor(Ports.PORT9, GearSetting.RATIO_18_1, False)\nleft_drive_smart = MotorGroup(left_motor_a, left_motor_b)\nright_motor_a = Motor(Ports.PORT2, GearSetting.RATIO_18_1, True)\nright_motor_b = Motor(Ports.PORT10, GearSetting.RATIO_18_1, True)\nright_drive_smart = MotorGroup(right_motor_a, right_motor_b)\ndrivetrain = DriveTrain(left_drive_smart, right_drive_smart, 319.19, 380, 192, MM, 1)\nbumper_a = Bumper(brain.three_wire_port.a)\nline_tracker_b = Line(brain.three_wire_port.b)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n\ndef play_vexcode_sound(sound_name):\n    # Helper to make playing sounds from the V5 in VEXcode easier and\n    # keeps the code cleaner by making it clear what is happening.\n    print(\"VEXPlaySound:\" + sound_name)\n    wait(5, MSEC)\n\n# add a small delay to make sure we don't print in the middle of the REPL header\nwait(200, MSEC)\n# clear the console to make sure we don't have the REPL in the console\nprint(\"\\033[2J\")\n\n\n\n# define variables used for controlling motors based on controller inputs\ncontroller_1_left_shoulder_control_motors_stopped = True\ncontroller_1_right_shoulder_control_motors_stopped = True\ndrivetrain_l_needs_to_be_stopped_controller_1 = False\ndrivetrain_r_needs_to_be_stopped_controller_1 = False\n\n# define a task that will handle monitoring inputs from controller_1\ndef rc_auto_loop_function_controller_1():\n    global drivetrain_l_needs_to_be_stopped_controller_1, drivetrain_r_needs_to_be_stopped_controller_1, controller_1_left_shoulder_control_motors_stopped, controller_1_right_shoulder_control_motors_stopped, remote_control_code_enabled\n    # process the controller input every 20 milliseconds\n    # update the motors based on the input values\n    while True:\n        if remote_control_code_enabled:\n            \n            # calculate the drivetrain motor velocities from the controller joystick axies\n            # left = axis3\n            # right = axis2\n            drivetrain_left_side_speed = controller_1.axis3.position()\n            drivetrain_right_side_speed = controller_1.axis2.position()\n            \n            # check if the value is inside of the deadband range\n            if drivetrain_left_side_speed < 5 and drivetrain_left_side_speed > -5:\n                # check if the left motor has already been stopped\n                if drivetrain_l_needs_to_be_stopped_controller_1:\n                    # stop the left drive motor\n                    left_drive_smart.stop()\n                    # tell the code that the left motor has been stopped\n                    drivetrain_l_needs_to_be_stopped_controller_1 = False\n            else:\n                # reset the toggle so that the deadband code knows to stop the left motor next\n                # time the input is in the deadband range\n                drivetrain_l_needs_to_be_stopped_controller_1 = True\n            # check if the value is inside of the deadband range\n            if drivetrain_right_side_speed < 5 and drivetrain_right_side_speed > -5:\n                # check if the right motor has already been stopped\n                if drivetrain_r_needs_to_be_stopped_controller_1:\n                    # stop the right drive motor\n                    right_drive_smart.stop()\n                    # tell the code that the right motor has been stopped\n                    drivetrain_r_needs_to_be_stopped_controller_1 = False\n            else:\n                # reset the toggle so that the deadband code knows to stop the right motor next\n                # time the input is in the deadband range\n                drivetrain_r_needs_to_be_stopped_controller_1 = True\n            \n            # only tell the left drive motor to spin if the values are not in the deadband range\n            if drivetrain_l_needs_to_be_stopped_controller_1:\n                left_drive_smart.set_velocity(drivetrain_left_side_speed, PERCENT)\n                left_drive_smart.spin(FORWARD)\n            # only tell the right drive motor to spin if the values are not in the deadband range\n            if drivetrain_r_needs_to_be_stopped_controller_1:\n                right_drive_smart.set_velocity(drivetrain_right_side_speed, PERCENT)\n                right_drive_smart.spin(FORWARD)\n            # check the buttonL1/buttonL2 status\n            # to control claw\n            if controller_1.buttonL1.pressing():\n                claw.spin(FORWARD)\n                controller_1_left_shoulder_control_motors_stopped = False\n            elif controller_1.buttonL2.pressing():\n                claw.spin(REVERSE)\n                controller_1_left_shoulder_control_motors_stopped = False\n            elif not controller_1_left_shoulder_control_motors_stopped:\n                claw.stop()\n                # set the toggle so that we don't constantly tell the motor to stop when\n                # the buttons are released\n                controller_1_left_shoulder_control_motors_stopped = True\n            # check the buttonR1/buttonR2 status\n            # to control arm\n            if controller_1.buttonR1.pressing():\n                arm.spin(FORWARD)\n                controller_1_right_shoulder_control_motors_stopped = False\n            elif controller_1.buttonR2.pressing():\n                arm.spin(REVERSE)\n                controller_1_right_shoulder_control_motors_stopped = False\n            elif not controller_1_right_shoulder_control_motors_stopped:\n                arm.stop()\n                # set the toggle so that we don't constantly tell the motor to stop when\n                # the buttons are released\n                controller_1_right_shoulder_control_motors_stopped = True\n        # wait before repeating the process\n        wait(20, MSEC)\n\n# define variable for remote controller enable/disable\nremote_control_code_enabled = True\n\nrc_auto_loop_thread_controller_1 = Thread(rc_auto_loop_function_controller_1)\n\n#endregion VEXcode Generated Robot Configuration\n\n# ------------------------------------------\n# \n# \tProject:      Medical Bot\n#\tAuthor:       Jonathan Su\n#\tCreated:      January 31, 2024\n#\tDescription:  VEXcode V5 Clawbot Medical Bot\n#   Configuration:  V5 Clawbot\n#                   Controller\n#                   Radio in Port 6\n#                   Claw Motor in Port 3\n#                   Arm Motor in Port 8\n#                   Left Motors in Port 1, 2\n#                   Right Motors in Port 9, 10\n#           \n# ------------------------------------------\n\nfrom vex import *\n\nhospital_length = 2000\nhospital_width = 1800\nroom_side = 600\nstart_room_length = 300\nelevator_length = 450\nstart_to_hall = (hospital_length / 2) - (start_room_length / 2)\nroom_to_hall = ((hospital_length - (room_side * 2)) / 2) + (room_side / 2)\nelevator_to_hall = (hospital_length / 2) - (elevator_length / 2)\n\n# Manually calibrate drivetrain forward/reverse\ndef basketball_drill():\n    drivetrain.set_drive_velocity(60, PERCENT)\n    drive_distance = 100\n\n    while drive_distance <= 400:\n        drivetrain.drive_for(FORWARD, drive_distance, MM)\n        wait(1, SECONDS)\n        drivetrain.drive_for(REVERSE, drive_distance, MM)\n        wait(1, SECONDS)\n        drive_distance = drive_distance * 2\n    else:\n        controller_1.screen.print(\"Basketball drill completed!\")\n\n# Manually calibrate drivetrain turning\ndef security_camera_drill():\n    drivetrain.set_turn_velocity(60, PERCENT)\n    drivetrain.turn_for(RIGHT, 90, DEGREES)\n\n    for i in range(3):\n        if i < 3:\n            drivetrain.turn_for(LEFT, 180, DEGREES)\n            wait(1, SECONDS)\n            drivetrain.turn_for(RIGHT, 180, DEGREES)\n            wait(1, SECONDS)\n    \n    controller_1.screen.print(\"Security camera drill completed!\")\n\ndef controller_x_pressed():\n    controller_1.rumble(\"...\")\n    controller_1.screen.print(\"Starting basketball drill...\")\n    basketball_drill()\n\ndef controller_y_pressed():\n    controller_1.rumble(\"...\")\n    controller_1.screen.print(\"Starting security camera drill...\")\n    security_camera_drill()\n\ndef controller_a_pressed():\n    while controller_1.buttonA.pressing():\n        drivetrain_information()\n    else: \n        controller_1.screen.clear_screen()\n\ndef controller_b_pressed():\n    quit()\n\ndef controller_up_pressed():\n    controller_1.screen.print(\"Picking up medicine...\")\n    pick_up_medicine()\n\ndef controller_down_pressed():\n    controller_1.screen.print(\"Delivering medicine...\")\n    deliver_medicine()\n\n# Displays drivetrain information on the Brain\ndef drivetrain_information():\n    wait(25, MSEC)\n    brain.screen.clear_screen()\n    brain.screen.set_cursor(1, 1)\n\n    brain.screen.print(\"Temperature: \", drivetrain.temperature(PERCENT))\n    brain.screen.next_row()\n    brain.screen.print(\"Efficiency: \", drivetrain.efficiency(PERCENT))\n    brain.screen.next_row()\n    brain.screen.print(\"Torque: \", drivetrain.torque(TorqueUnits.NM))\n    brain.screen.next_row()\n    brain.screen.print(\"Power: \", drivetrain.power(PowerUnits.WATT))\n    brain.screen.next_row()\n    brain.screen.print(\"Current: \", drivetrain.current(CurrentUnits.AMP))\n    \ndef pick_up_medicine():\n    move_start_room()\n    drivetrain.drive_for(FORWARD, room_side * 2, MM)\n    drivetrain.turn_for(RIGHT, 90, DEGREES)\n    drivetrain.drive_for(FORWARD, room_to_hall, MM)\n    wait(20, SECONDS)\n    drivetrain.drive_for(REVERSE, room_to_hall, MM)\n    drivetrain.turn_for(RIGHT, 90, DEGREES)\n\n    controller_1.screen.print(\"Sucessfully picked up supplies!\")\n\ndef deliver_medicine():\n    floor_number = 1\n\n    if floor_number == 1:\n        rooms_left = 1\n        while rooms_left > 0:\n            drivetrain.drive_for(FORWARD, room_side, MM)\n            drivetrain.turn_for(LEFT, 90, DEGREES)\n            drivetrain.drive_for(FORWARD, room_to_hall, MM)\n            wait(10, SECONDS)\n            drivetrain.drive_for(REVERSE, room_to_hall, MM)\n            drivetrain.turn_for(RIGHT, 90, DEGREES)\n            \n            rooms_left = rooms_left - 1\n        else:\n            elevator()\n            floor_number = 2\n    elif floor_number == 2:\n        rooms_left = 2\n\n        elevator(leave = True)\n\n        while rooms_left > 0:\n            drivetrain.drive_for(FORWARD, room_side * rooms_left, MM)\n            drivetrain.turn_for(LEFT, 90, DEGREES)\n            drivetrain.drive_for(FORWARD, room_to_hall, MM)\n            wait(10, SECONDS)\n            drivetrain.drive_for(REVERSE, room_to_hall, MM)\n            drivetrain.turn_for(LEFT, 90, DEGREES)\n\n            rooms_left = rooms_left - 1\n        else:\n            elevator()\n            move_start_room(reset = True)\n\ndef elevator(leave = False):\n    if not leave:\n        drivetrain.drive_for(FORWARD, room_side, MM)\n        drivetrain.turn_for(LEFT, 90, DEGREES)\n        drivetrain.drive_for(FORWARD, elevator_to_hall, MM)\n        drivetrain.turn_for(RIGHT, 180, DEGREES)\n        wait(20, SECONDS)\n    else:\n        drivetrain.drive_for(FORWARD, elevator_to_hall, MM)\n        drivetrain.turn_for(RIGHT, 90, DEGREES)\n        \ndef move_start_room(reset = False):\n    if not reset:\n        drivetrain.drive_for(FORWARD, start_to_hall, MM)\n        drivetrain.turn_for(LEFT, 90, DEGREES)\n    else:\n        drivetrain.drive_for(FORWARD, elevator_to_hall + start_to_hall, MM)\n        drivetrain.turn_for(RIGHT, 180, DEGREES)\n\n# Callback functions\ncontroller_1.buttonX.pressed(controller_x_pressed)\ncontroller_1.buttonY.pressed(controller_y_pressed)\ncontroller_1.buttonA.pressed(controller_a_pressed)\ncontroller_1.buttonB.pressed(controller_b_pressed)\ncontroller_1.buttonUp.pressed(controller_up_pressed)\ncontroller_1.buttonDown.pressed(controller_down_pressed)\nwait(15, MSEC)\n\n#while True:\n#    left_drive_smart.set_velocity(controller_1.axis3.position(), PERCENT)\n#    right_drive_smart.set_velocity(controller_1.axis2.position(), PERCENT)\n#    left_drive_smart.spin(FORWARD)\n#    right_drive_smart.spin(FORWARD)\n\n#def arm_up():\n#    arm.spin(FORWARD)\n\n#    while controller_1.buttonR1.pressing():\n#        wait(5, MSEC)\n#    else:\n#        arm.stop()\n\n#def arm_down():\n#    arm.spin(REVERSE)\n\n#    while controller_1.buttonR2.pressing():\n#        wait(5, MSEC)\n#    else:\n#        arm.stop()\n\n#def claw_open():\n#    claw.spin(FORWARD)\n\n#    while controller_1.buttonL1.pressing():\n#        wait(5, MSEC)\n#    else:\n#        claw.stop()\n\n#def claw_close():\n#    claw.spin(REVERSE)\n#\n#    while controller_1.buttonL2.pressing():\n#       wait(5, MSEC)\n#    else:\n#        claw.stop()\n\n#controller_1.buttonR1.pressed(arm_up)\n#controller_1.buttonR2.pressed(arm_down)\n#controller_1.buttonL1.pressed(claw_open)\n#controller_1.buttonL2.pressed(claw_close)","textLanguage":"python","rconfig":[{"port":[],"name":"controller_1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"claw","leftDir":"false","right":"arm","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"tank","id":"primary"},"triportSourcePort":22},{"port":[8],"name":"arm","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"},"triportSourcePort":22},{"port":[3],"name":"claw","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"},"triportSourcePort":22},{"port":[1,9,2,10,0],"name":"drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"4-motor","wheelSize":"wheel4in","gear":"ratio18_1","gearRatio":"1:1","direction":"fwd","gyroType":"none","width":"380","unit":"mm","wheelbase":"192","wheelbaseUnit":"mm","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180"},"triportSourcePort":null},{"port":[1],"name":"bumper_a","customName":false,"deviceType":"Bumper","deviceClass":"bumper","setting":{"id":"partner"},"triportSourcePort":22},{"port":[2],"name":"line_tracker_b","customName":false,"deviceType":"LineTracker","deviceClass":"line","setting":{"id":"partner"},"triportSourcePort":22}],"slot":1,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"3.0.5","minVersion":"3.0.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"target":"Physical"}